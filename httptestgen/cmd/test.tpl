// Code generated by httptestgen. DO NOT EDIT.

package {{.PackageName}}

import (
    "bytes"
    "context"
    "encoding/json"
    "io"
    "net/http/httptest"
    "testing"
    "time"
)
{{- range $funcSpec := .FunctionSpecs}}
func Test{{$funcSpec.Func}}(t *testing.T) {
    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
    defer cancel()
{{- range $i, $testCase := $funcSpec.TestCases}}

    t.Run("{{sanitizeName $testCase.CaseDescr}}", func(t *testing.T) {
        var reqReader io.Reader = nil
{{- if hasBody $testCase.Request.Body}}
{{- if hasRequestFields $testCase.RequestFields}}
        requestData := {{$testCase.RequestType}}{
{{- range $field := $testCase.RequestFields}}
            {{$field.FieldName}}: {{$field.ValueCode}},
{{- end}}
        }

        requestBody, err := json.Marshal(requestData)
        if err != nil {
            t.Fatalf("Failed to marshal request: %v", err)
        }
        reqReader = bytes.NewReader(requestBody)
{{- else}}
        reqReader = bytes.NewReader([]byte(`{{jsonMarshal $testCase.Request.Body}}`))
{{- end}}
{{- end}}
        req := httptest.NewRequestWithContext(ctx, "{{if $testCase.Request.Method}}{{$testCase.Request.Method}}{{else}}GET{{end}}", "{{if $testCase.Request.Path}}{{$testCase.Request.Path}}{{else}}/{{end}}", reqReader)

        rr := httptest.NewRecorder()
        {{$funcSpec.Func}}(rr, req)

        if status := rr.Code; status != {{$testCase.Response.StatusCode}} {
           t.Errorf("{{$funcSpec.Func}} returned wrong status code: got %v want {{$testCase.Response.StatusCode}}", status)
        }

{{- if hasBody $testCase.Response.Body}}
{{- if hasResponseFields $testCase.ResponseFields}}

        expectedResponse := {{$testCase.ResponseType}}{
{{- range $field := $testCase.ResponseFields}}
            {{$field.FieldName}}: {{$field.ValueCode}},
{{- end}}
        }

        var actualResponse {{$testCase.ResponseType}}
        if err := json.Unmarshal(rr.Body.Bytes(), &actualResponse); err != nil {
            t.Fatalf("Failed to unmarshal actual response: %v", err)
        }

{{- range $field := $testCase.ResponseFields}}
{{- if eq $field.GoType "string"}}
        if expectedResponse.{{$field.FieldName}} != actualResponse.{{$field.FieldName}} {
            t.Errorf("{{$funcSpec.Func}} field {{$field.FieldName}} mismatch:\ngot:  %q\nwant: %q", actualResponse.{{$field.FieldName}}, expectedResponse.{{$field.FieldName}})
        }
{{- else if eq $field.GoType "int"}}
        if expectedResponse.{{$field.FieldName}} != actualResponse.{{$field.FieldName}} {
            t.Errorf("{{$funcSpec.Func}} field {{$field.FieldName}} mismatch:\ngot:  %d\nwant: %d", actualResponse.{{$field.FieldName}}, expectedResponse.{{$field.FieldName}})
        }
{{- else if eq $field.GoType "float"}}
        if expectedResponse.{{$field.FieldName}} != actualResponse.{{$field.FieldName}} {
            t.Errorf("{{$funcSpec.Func}} field {{$field.FieldName}} mismatch:\ngot:  %f\nwant: %f", actualResponse.{{$field.FieldName}}, expectedResponse.{{$field.FieldName}})
        }
{{- else if eq $field.GoType "bool"}}
        if expectedResponse.{{$field.FieldName}} != actualResponse.{{$field.FieldName}} {
            t.Errorf("{{$funcSpec.Func}} field {{$field.FieldName}} mismatch:\ngot:  %t\nwant: %t", actualResponse.{{$field.FieldName}}, expectedResponse.{{$field.FieldName}})
        }
{{- else if eq $field.GoType "struct"}}
        expectedFieldJSON, _ := json.Marshal(expectedResponse.{{$field.FieldName}})
        actualFieldJSON, _ := json.Marshal(actualResponse.{{$field.FieldName}})
        if string(expectedFieldJSON) != string(actualFieldJSON) {
            t.Errorf("{{$funcSpec.Func}} field {{$field.FieldName}} mismatch:\ngot:  %s\nwant: %s", string(actualFieldJSON), string(expectedFieldJSON))
        }
{{- else}}
        expectedFieldJSON, _ := json.Marshal(expectedResponse.{{$field.FieldName}})
        actualFieldJSON, _ := json.Marshal(actualResponse.{{$field.FieldName}})
        if string(expectedFieldJSON) != string(actualFieldJSON) {
            t.Errorf("{{$funcSpec.Func}} field {{$field.FieldName}} mismatch:\ngot:  %s\nwant: %s", string(actualFieldJSON), string(expectedFieldJSON))
        }
{{- end}}
{{- end}}
{{- else}}

        expectedBody := `{{jsonMarshal $testCase.Response.Body}}`

        var expected, actual map[string]any
        if err := json.Unmarshal([]byte(expectedBody), &expected); err != nil {
           t.Fatalf("Failed to unmarshal expected response: %v", err)
        }

        if err := json.Unmarshal(rr.Body.Bytes(), &actual); err != nil {
           t.Fatalf("Failed to unmarshal actual response: %v", err)
        }

        expectedJSON, err := json.Marshal(expected)
        if err != nil {
            t.Fatalf("unexpected error while json marshalling expected json: %v\n", err)
        }
        actualJSON, err := json.Marshal(actual)
        if err != nil {
            t.Fatalf("unexpected error while json marshalling actual json: %v\n", err)
        }

        if string(expectedJSON) != string(actualJSON) {
           t.Errorf("{{$funcSpec.Func}} returned unexpected body:\ngot:  %s\nwant: %s", string(actualJSON), string(expectedJSON))
        }
{{- end}}
{{- end}}
    })
{{- end}}
}

{{- end}}