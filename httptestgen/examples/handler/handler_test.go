// Code generated by httptestgen. DO NOT EDIT.

package handler

import (
    "bytes"
    "context"
    "encoding/json"
    "io"
    "net/http/httptest"
    "testing"
    "time"
)
func TestCreateUserHandler(t *testing.T) {
    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
    defer cancel()

    t.Run("it_should_succeed_when_a_valid_user_is_passed", func(t *testing.T) {
        var reqReader io.Reader = nil
        requestData := CreateUserRequest{
            Name: "Andrea",
            Email: "andrea@gitpod.io",
        }

        requestBody, err := json.Marshal(requestData)
        if err != nil {
            t.Fatalf("Failed to marshal request: %v", err)
        }
        reqReader = bytes.NewReader(requestBody)
        req := httptest.NewRequestWithContext(ctx, "POST", "/users", reqReader)

        req.Header.Set("Authorization", "Bearer token123")

        req.Header.Set("Content-Type", "application/json")

        rr := httptest.NewRecorder()
        CreateUserHandler(rr, req)

        if status := rr.Code; status != 201 {
           t.Errorf("CreateUserHandler returned wrong status code: got %v want 201", status)
        }

        if header := rr.Header().Get("Content-Type"); header != "application/json" {
           t.Errorf("CreateUserHandler returned wrong Content-Type header: got %v want application/json", header)
        }

        expectedBody := `{"message":"User created successfully","user":{"email":"andrea@gitpod.io","id":1,"name":"Andrea"}}`

        var expected, actual map[string]any
        if err := json.Unmarshal([]byte(expectedBody), &expected); err != nil {
           t.Fatalf("Failed to unmarshal expected response: %v", err)
        }

        if err := json.Unmarshal(rr.Body.Bytes(), &actual); err != nil {
           t.Fatalf("Failed to unmarshal actual response: %v", err)
        }

        expectedJSON, err := json.Marshal(expected)
        if err != nil {
            t.Fatalf("unexpected error while json marshalling expected json: %v\n", err)
        }
        actualJSON, err := json.Marshal(actual)
        if err != nil {
            t.Fatalf("unexpected error while json marshalling actual json: %v\n", err)
        }

        if string(expectedJSON) != string(actualJSON) {
           t.Errorf("CreateUserHandler returned unexpected body:\ngot:  %s\nwant: %s", string(actualJSON), string(expectedJSON))
        }
    })

    t.Run("it_should_return_a_bad_request_when_the_request_is_invalid", func(t *testing.T) {
        var reqReader io.Reader = nil
        requestData := CreateUserRequest{
            Name: "Andrea",
            Email: "",
        }

        requestBody, err := json.Marshal(requestData)
        if err != nil {
            t.Fatalf("Failed to marshal request: %v", err)
        }
        reqReader = bytes.NewReader(requestBody)
        req := httptest.NewRequestWithContext(ctx, "POST", "/users", reqReader)

        req.Header.Set("Content-Type", "application/json")

        rr := httptest.NewRecorder()
        CreateUserHandler(rr, req)

        if status := rr.Code; status != 400 {
           t.Errorf("CreateUserHandler returned wrong status code: got %v want 400", status)
        }

        if header := rr.Header().Get("Content-Type"); header != "application/json" {
           t.Errorf("CreateUserHandler returned wrong Content-Type header: got %v want application/json", header)
        }

        expectedBody := `{"code":"INVALID_INPUT","error":"Invalid request"}`

        var expected, actual map[string]any
        if err := json.Unmarshal([]byte(expectedBody), &expected); err != nil {
           t.Fatalf("Failed to unmarshal expected response: %v", err)
        }

        if err := json.Unmarshal(rr.Body.Bytes(), &actual); err != nil {
           t.Fatalf("Failed to unmarshal actual response: %v", err)
        }

        expectedJSON, err := json.Marshal(expected)
        if err != nil {
            t.Fatalf("unexpected error while json marshalling expected json: %v\n", err)
        }
        actualJSON, err := json.Marshal(actual)
        if err != nil {
            t.Fatalf("unexpected error while json marshalling actual json: %v\n", err)
        }

        if string(expectedJSON) != string(actualJSON) {
           t.Errorf("CreateUserHandler returned unexpected body:\ngot:  %s\nwant: %s", string(actualJSON), string(expectedJSON))
        }
    })
}
func TestGetUserHandler(t *testing.T) {
    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
    defer cancel()

    t.Run("it_should_return_user_when_valid_ID_is_provided", func(t *testing.T) {
        var reqReader io.Reader = nil
        req := httptest.NewRequestWithContext(ctx, "GET", "/users/123", reqReader)

        req.Header.Set("Authorization", "Bearer token123")

        rr := httptest.NewRecorder()
        GetUserHandler(rr, req)

        if status := rr.Code; status != 200 {
           t.Errorf("GetUserHandler returned wrong status code: got %v want 200", status)
        }

        if header := rr.Header().Get("Content-Type"); header != "application/json" {
           t.Errorf("GetUserHandler returned wrong Content-Type header: got %v want application/json", header)
        }

        expectedBody := `{"email":"jane@example.com","id":123,"name":"Jane Smith"}`

        var expected, actual map[string]any
        if err := json.Unmarshal([]byte(expectedBody), &expected); err != nil {
           t.Fatalf("Failed to unmarshal expected response: %v", err)
        }

        if err := json.Unmarshal(rr.Body.Bytes(), &actual); err != nil {
           t.Fatalf("Failed to unmarshal actual response: %v", err)
        }

        expectedJSON, err := json.Marshal(expected)
        if err != nil {
            t.Fatalf("unexpected error while json marshalling expected json: %v\n", err)
        }
        actualJSON, err := json.Marshal(actual)
        if err != nil {
            t.Fatalf("unexpected error while json marshalling actual json: %v\n", err)
        }

        if string(expectedJSON) != string(actualJSON) {
           t.Errorf("GetUserHandler returned unexpected body:\ngot:  %s\nwant: %s", string(actualJSON), string(expectedJSON))
        }
    })

    t.Run("it_should_return_not_found_when_user_does_not_exist", func(t *testing.T) {
        var reqReader io.Reader = nil
        req := httptest.NewRequestWithContext(ctx, "GET", "/users/999", reqReader)

        req.Header.Set("Authorization", "Bearer token123")

        rr := httptest.NewRecorder()
        GetUserHandler(rr, req)

        if status := rr.Code; status != 404 {
           t.Errorf("GetUserHandler returned wrong status code: got %v want 404", status)
        }

        if header := rr.Header().Get("Content-Type"); header != "application/json" {
           t.Errorf("GetUserHandler returned wrong Content-Type header: got %v want application/json", header)
        }

        expectedBody := `{"code":"USER_NOT_FOUND","error":"User not found"}`

        var expected, actual map[string]any
        if err := json.Unmarshal([]byte(expectedBody), &expected); err != nil {
           t.Fatalf("Failed to unmarshal expected response: %v", err)
        }

        if err := json.Unmarshal(rr.Body.Bytes(), &actual); err != nil {
           t.Fatalf("Failed to unmarshal actual response: %v", err)
        }

        expectedJSON, err := json.Marshal(expected)
        if err != nil {
            t.Fatalf("unexpected error while json marshalling expected json: %v\n", err)
        }
        actualJSON, err := json.Marshal(actual)
        if err != nil {
            t.Fatalf("unexpected error while json marshalling actual json: %v\n", err)
        }

        if string(expectedJSON) != string(actualJSON) {
           t.Errorf("GetUserHandler returned unexpected body:\ngot:  %s\nwant: %s", string(actualJSON), string(expectedJSON))
        }
    })
}
func TestHealthCheckHandler(t *testing.T) {
    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
    defer cancel()

    t.Run("it_should_return_ok_status", func(t *testing.T) {
        var reqReader io.Reader = nil
        req := httptest.NewRequestWithContext(ctx, "GET", "/health", reqReader)

        rr := httptest.NewRecorder()
        HealthCheckHandler(rr, req)

        if status := rr.Code; status != 200 {
           t.Errorf("HealthCheckHandler returned wrong status code: got %v want 200", status)
        }

        if header := rr.Header().Get("Content-Type"); header != "application/json" {
           t.Errorf("HealthCheckHandler returned wrong Content-Type header: got %v want application/json", header)
        }

        expectedBody := `{"status":"ok","timestamp":"2024-01-01T00:00:00Z"}`

        var expected, actual map[string]any
        if err := json.Unmarshal([]byte(expectedBody), &expected); err != nil {
           t.Fatalf("Failed to unmarshal expected response: %v", err)
        }

        if err := json.Unmarshal(rr.Body.Bytes(), &actual); err != nil {
           t.Fatalf("Failed to unmarshal actual response: %v", err)
        }

        expectedJSON, err := json.Marshal(expected)
        if err != nil {
            t.Fatalf("unexpected error while json marshalling expected json: %v\n", err)
        }
        actualJSON, err := json.Marshal(actual)
        if err != nil {
            t.Fatalf("unexpected error while json marshalling actual json: %v\n", err)
        }

        if string(expectedJSON) != string(actualJSON) {
           t.Errorf("HealthCheckHandler returned unexpected body:\ngot:  %s\nwant: %s", string(actualJSON), string(expectedJSON))
        }
    })
}