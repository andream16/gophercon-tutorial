// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"
)

const createFinding = `-- name: CreateFinding :exec
;

INSERT INTO finding (instance_id, details)
VALUES (?, ?)
`

type CreateFindingParams struct {
	InstanceID interface{}
	Details    string
}

func (q *Queries) CreateFinding(ctx context.Context, arg CreateFindingParams) error {
	_, err := q.db.ExecContext(ctx, createFinding, arg.InstanceID, arg.Details)
	return err
}

const findingsByID = `-- name: FindingsByID :many
SELECT id, details
FROM finding
WHERE instance_id = ?
`

type FindingsByIDRow struct {
	ID      int64
	Details string
}

func (q *Queries) FindingsByID(ctx context.Context, instanceID interface{}) ([]FindingsByIDRow, error) {
	rows, err := q.db.QueryContext(ctx, findingsByID, instanceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindingsByIDRow
	for rows.Next() {
		var i FindingsByIDRow
		if err := rows.Scan(&i.ID, &i.Details); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
