// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for GopherColor.
const (
	GopherColorBlack  GopherColor = "black"
	GopherColorBlue   GopherColor = "blue"
	GopherColorBrown  GopherColor = "brown"
	GopherColorGray   GopherColor = "gray"
	GopherColorGreen  GopherColor = "green"
	GopherColorPink   GopherColor = "pink"
	GopherColorPurple GopherColor = "purple"
	GopherColorWhite  GopherColor = "white"
)

// Defines values for PurchaseRequestColor.
const (
	PurchaseRequestColorBlack  PurchaseRequestColor = "black"
	PurchaseRequestColorBlue   PurchaseRequestColor = "blue"
	PurchaseRequestColorBrown  PurchaseRequestColor = "brown"
	PurchaseRequestColorGray   PurchaseRequestColor = "gray"
	PurchaseRequestColorGreen  PurchaseRequestColor = "green"
	PurchaseRequestColorPink   PurchaseRequestColor = "pink"
	PurchaseRequestColorPurple PurchaseRequestColor = "purple"
	PurchaseRequestColorWhite  PurchaseRequestColor = "white"
)

// Error defines model for Error.
type Error struct {
	// Error Error code
	Error string `json:"error"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// Gopher defines model for Gopher.
type Gopher struct {
	// Color Color of the gopher plushie
	Color GopherColor `json:"color"`

	// Id Unique identifier for the gopher
	Id int64 `json:"id"`

	// Name Name of the gopher plushie
	Name string `json:"name"`

	// Price Price of the gopher plushie in USD
	Price float32 `json:"price"`
}

// GopherColor Color of the gopher plushie
type GopherColor string

// PurchaseRequest defines model for PurchaseRequest.
type PurchaseRequest struct {
	// Color Color of the gopher plushie
	Color PurchaseRequestColor `json:"color"`

	// CustomerEmail Customer's email address
	CustomerEmail openapi_types.Email `json:"customerEmail"`

	// Quantity Number of gophers to purchase
	Quantity int `json:"quantity"`
}

// PurchaseRequestColor Color of the gopher plushie
type PurchaseRequestColor string

// PurchaseResponse defines model for PurchaseResponse.
type PurchaseResponse struct {
	// OrderId Unique order identifier
	OrderId string `json:"orderId"`
}

// BuyGopherJSONRequestBody defines body for BuyGopher for application/json ContentType.
type BuyGopherJSONRequestBody = PurchaseRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListGophers request
	ListGophers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuyGopherWithBody request with any body
	BuyGopherWithBody(ctx context.Context, gopherId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BuyGopher(ctx context.Context, gopherId int64, body BuyGopherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListGophers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGophersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuyGopherWithBody(ctx context.Context, gopherId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuyGopherRequestWithBody(c.Server, gopherId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuyGopher(ctx context.Context, gopherId int64, body BuyGopherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuyGopherRequest(c.Server, gopherId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListGophersRequest generates requests for ListGophers
func NewListGophersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gophers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuyGopherRequest calls the generic BuyGopher builder with application/json body
func NewBuyGopherRequest(server string, gopherId int64, body BuyGopherJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBuyGopherRequestWithBody(server, gopherId, "application/json", bodyReader)
}

// NewBuyGopherRequestWithBody generates requests for BuyGopher with any type of body
func NewBuyGopherRequestWithBody(server string, gopherId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gopherId", runtime.ParamLocationPath, gopherId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gophers/%s/buy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListGophersWithResponse request
	ListGophersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListGophersResponse, error)

	// BuyGopherWithBodyWithResponse request with any body
	BuyGopherWithBodyWithResponse(ctx context.Context, gopherId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuyGopherResponse, error)

	BuyGopherWithResponse(ctx context.Context, gopherId int64, body BuyGopherJSONRequestBody, reqEditors ...RequestEditorFn) (*BuyGopherResponse, error)
}

type ListGophersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Gopher
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListGophersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGophersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuyGopherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PurchaseResponse
	JSON400      *Error
	JSON404      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r BuyGopherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuyGopherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListGophersWithResponse request returning *ListGophersResponse
func (c *ClientWithResponses) ListGophersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListGophersResponse, error) {
	rsp, err := c.ListGophers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListGophersResponse(rsp)
}

// BuyGopherWithBodyWithResponse request with arbitrary body returning *BuyGopherResponse
func (c *ClientWithResponses) BuyGopherWithBodyWithResponse(ctx context.Context, gopherId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuyGopherResponse, error) {
	rsp, err := c.BuyGopherWithBody(ctx, gopherId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuyGopherResponse(rsp)
}

func (c *ClientWithResponses) BuyGopherWithResponse(ctx context.Context, gopherId int64, body BuyGopherJSONRequestBody, reqEditors ...RequestEditorFn) (*BuyGopherResponse, error) {
	rsp, err := c.BuyGopher(ctx, gopherId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuyGopherResponse(rsp)
}

// ParseListGophersResponse parses an HTTP response from a ListGophersWithResponse call
func ParseListGophersResponse(rsp *http.Response) (*ListGophersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListGophersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Gopher
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBuyGopherResponse parses an HTTP response from a BuyGopherWithResponse call
func ParseBuyGopherResponse(rsp *http.Response) (*BuyGopherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuyGopherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PurchaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all available gophers
	// (GET /gophers)
	ListGophers(w http.ResponseWriter, r *http.Request)
	// Purchase a gopher plushie
	// (POST /gophers/{gopherId}/buy)
	BuyGopher(w http.ResponseWriter, r *http.Request, gopherId int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListGophers operation middleware
func (siw *ServerInterfaceWrapper) ListGophers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGophers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// BuyGopher operation middleware
func (siw *ServerInterfaceWrapper) BuyGopher(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "gopherId" -------------
	var gopherId int64

	err = runtime.BindStyledParameterWithOptions("simple", "gopherId", mux.Vars(r)["gopherId"], &gopherId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "gopherId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BuyGopher(w, r, gopherId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/gophers", wrapper.ListGophers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/gophers/{gopherId}/buy", wrapper.BuyGopher).Methods("POST")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXWW/bRhD+K4ttgbYAo8NxClhPsePEERDYgh0/GUawIofSxnt5D8WCwP9ezHJJURKd",
	"xigatG/UXvPNfN8c2tBcS6MVKO/oZENdvgTJ4ud7a7XFD2O1Aes5xGVolgtwueXGc63opD5Ncl0AzSg8",
	"MWkE0Am9uJp9fH/95fLq85cPV7eX5zSjfm1wx3nL1YJWGZXgHFvA4Zsfg2TqlQVWsLkAEi2T5nTXyucl",
	"EAuPAZyHgiy0WQJiCaIgSnsyB1LqoIpD41VG8R63UNDJXfJti+i+vaDnXyH3iPYivn4Yl1yLvri8w2Wi",
	"S+KX0CAzIrgljy6oINHwXAT8abh6oBmdW/1N0YwuLFvTjH5bco+7c8Hyh7gMgNsmWHT/vhuJ9NBBjHlx",
	"CO1W8ccAhBegPC85WFJq28HZDfE4o6W2knk6oVz5P4+3RrjysACLVhSTPTReMgnPR6CF/kGEskR/JXv6",
	"BGrhl3TyZtTji7E87zEzw+V+O4Qrcntz3jV3dDw4Oek4VQrNPBrnikskZTQYjVvjKsg5urinF46Sik5n",
	"if8GXZ9yZsHmS+bgulbq/01CeXBeS7DvJeOiB2Xa/s0RwBOEFYUF53Y4bt54m5YGuZa0w0K82Wf8MTDl",
	"uV/3qCtSg+GpQ+OI18SkUO9JWLKnmtzxqMP0+FDKezy31rc070bj+3Q7o5WDQ761LcBOn8/MuN/Jz51Q",
	"Xl2fvxofvT5+87dVrTFzCBJPclXqWnzKszyqsmZhQl0wRlv/NgXWa9sQVid6qoXkBnfITX0aXd/15pQ4",
	"jqDJ6WwaS4xkii24WhCmioYq/LmrbVSO5150DM1SOtcGT2dTmtEVWFfbGQ9GgxGa1wYUM5xO6OvBaPAa",
	"dc78MoZ8mHzB7wX4w9Bfg7ccVkAYEdx51BUTYh8ayYO1oLxYE7ZiXMT+xFXM0BgnGlFYhq8iw/QTd/4i",
	"2UZ6ak1EHEejUUMAqAiJGSN4Hi8PvzrEtdkyf9cWiiZVsbiPW1LaOprqZKx0Vba9lUoE3jpqb70LRSFi",
	"zJtrJ3jtPksjAULgHmRE/KuFkk7oL8Pt8DBMk8Mw9ceqFRuzWIOi1nZDfRPyHJwrgxBrYlPcizbsDVNV",
	"Rt/8UIS2QL+Hrx5reuBMlQermCAO7ApsPW7EZHJBSmbXicWohy3rLcwqa9U13NQf06IazkMsWka7HrWd",
	"hTVhxBnIecnz/a41XxPuHZmeH6jpLKwvmh5tmGUSfBT13b4BnIzCQZ/f7SW79ZLjNcyXbZo3ztBuXfE2",
	"QFccLxoVUFdpYDvTxfol8t/sN6Lnmsq2ZYyr7AfFsd+iq91aij5X/yx7NymanX7/ojTeNo2dDtBxNqPO",
	"Mx8cRkarklsJcfLVnolTqQOCbB57aVRSJ+vJnuYMcW1WY+Ye/4zMPWNFM/6T37laMcELwpUJ/o8aw/G/",
	"jyF1KPy7Uf/XiIZPfpphHWLRdF7nD/+pktkKg+3PrvHB+mZf6ZpZXYQcf6TnaUaDxYRfem/cZDhkhg/2",
	"ZpPhakyr++qvAAAA//9KbrMK1w4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
