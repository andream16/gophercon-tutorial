// Code generated by go-enum DO NOT EDIT.

package currency

import (
	"errors"
	"fmt"
)

const (
	// SymbolGbp is a Symbol of type gbp.
	SymbolGbp Symbol = "gbp"
	// SymbolEur is a Symbol of type eur.
	SymbolEur Symbol = "eur"
	// SymbolUsd is a Symbol of type usd.
	SymbolUsd Symbol = "usd"
)

var ErrInvalidSymbol = errors.New("not a valid Symbol")

// String implements the Stringer interface.
func (x Symbol) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Symbol) IsValid() bool {
	_, err := ParseSymbol(string(x))
	return err == nil
}

var _SymbolValue = map[string]Symbol{
	"gbp": SymbolGbp,
	"eur": SymbolEur,
	"usd": SymbolUsd,
}

// ParseSymbol attempts to convert a string to a Symbol.
func ParseSymbol(name string) (Symbol, error) {
	if x, ok := _SymbolValue[name]; ok {
		return x, nil
	}
	return Symbol(""), fmt.Errorf("%s is %w", name, ErrInvalidSymbol)
}
